#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
#Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.
from sys import argv
path, p1, p2, p3  = argv
p1, p2, p3 = map(int,argv[1:])
zp = p1 * p2 + p3
print(f'Зараплатная плата состовялет: {zp}')

#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
#Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
#Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#Результат: [12, 44, 4, 10, 78, 123].
n = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new = [n[el] for el in range(len(n)) if n[el] > n[el - 1]]
print(new)

#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
#Подсказка: используйте функцию range() и генератор.
new_li = [el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]
print(new_li)

#4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке.
#Для выполнения задания обязательно используйте генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#Результат: [23, 1, 3, 10, 4, 11]
li = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
li1 = [el for el in li if li.count(el) == 1]
print(li1)

#5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().
from functools import reduce
li1 = [el for el in range(100,1001) if el % 2 == 0]
proiz = reduce((lambda x, y: x * y), li1)
print(li1)

#6. Реализовать два небольших скрипта:
#итератор, генерирующий целые числа, начиная с указанного;
#итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
#Предусмотрите условие его завершения. Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл.
#Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.
from itertools import count, cycle
for el in count(3):
    print(el)
    if el > 10:
        break

sp = [1 , 5, 10, 11, 95, 1001, 856]
n = 0
for el in cycle(sp):
    n += 1
    if n > 21:
        break
    print(el)

#7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
#Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
from math import factorial
def func(n: int):
    for el in range(1, n + 1):
        yield factorial(el)

data = int(input('Пожалуйста введите количество вычисленных факториалов: '))
for el in func(data):
    print(el)